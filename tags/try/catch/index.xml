<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Try/Catch on TECH-ANDGAR</title><link>https://tech-andgar.me/tags/try/catch/</link><description>Recent content in Try/Catch on TECH-ANDGAR</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://tech-andgar.me/tags/try/catch/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Handling in Dart: Should You Use `try/catch`, Return Values, or Functional Approaches?</title><link>https://tech-andgar.me/posts/dart-try-catch-vs-records-values-vs-functional-approaches-for-error-handling/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://tech-andgar.me/posts/dart-try-catch-vs-records-values-vs-functional-approaches-for-error-handling/</guid><description>&lt;h1 id="error-handling-in-dart-should-you-use-trycatch-return-values-or-functional-approaches">
 Error Handling in Dart: Should You Use &lt;code>try/catch&lt;/code>, Return Values, or Functional Approaches?
 &lt;a class="heading-link" href="#error-handling-in-dart-should-you-use-trycatch-return-values-or-functional-approaches">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="summary">
 Summary
 &lt;a class="heading-link" href="#summary">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>This article explores different strategies for error handling in Dart, comparing the traditional &lt;code>try/catch&lt;/code> approach with more modern methods such as using return values, custom classes, and functional approaches using packages like &lt;code>dartz&lt;/code> and &lt;code>fpdart&lt;/code>. You&amp;rsquo;ll learn when and why to use each approach, with practical examples and performance considerations.&lt;/p></description></item></channel></rss>