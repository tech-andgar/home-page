<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dart on TECH-ANDGAR</title><link>https://tech-andgar.me/categories/dart/</link><description>Recent content in Dart on TECH-ANDGAR</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://tech-andgar.me/categories/dart/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Handling in Dart: Should You Use `try/catch`, Return Values, or Functional Approaches?</title><link>https://tech-andgar.me/posts/dart-try-catch-vs-records-values-vs-functional-approaches-for-error-handling/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://tech-andgar.me/posts/dart-try-catch-vs-records-values-vs-functional-approaches-for-error-handling/</guid><description>Error Handling in Dart: Should You Use try/catch, Return Values, or Functional Approaches? Link to heading Summary Link to heading This article explores different strategies for error handling in Dart, comparing the traditional try/catch approach with more modern methods such as using return values, custom classes, and functional approaches using packages like dartz and fpdart. You&amp;rsquo;ll learn when and why to use each approach, with practical examples and performance considerations.</description></item><item><title>`http_status` Dart Package: A Comprehensive Guide</title><link>https://tech-andgar.me/posts/dart-http_status-package/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><guid>https://tech-andgar.me/posts/dart-http_status-package/</guid><description>http_status Dart Package: A Comprehensive Guide Link to heading Description Link to heading Constants: http_status provides convenient static constants representing all HTTP status codes defined in RFC 1945 (HTTP/1.0), RFC 2616 (HTTP/1.1), and RFC 2518 (WebDAV). Clarity: Each constant offers a clear name (e.g., ok, notFound, forbidden), making it easy to understand the meaning of a status code at a glance. Information: Constants also provide a concise description of the status code, which can be helpful in debugging or understanding API responses.</description></item><item><title>Dart - Use late allocation if possible</title><link>https://tech-andgar.me/posts/dart-late-keyword/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://tech-andgar.me/posts/dart-late-keyword/</guid><description>Dart v2.9 added the late modifier on variables.
When Null Safety is enabled, it is sometimes necessary to explicitly state that we will initialize a non-null variable later. Dart cannot always assume that a variable will be initialized later, as in the case of high-level variables. The following example would throw an error in Dart.
This can be used in the following two cases.
Late assign: promise to assign later</description></item></channel></rss>